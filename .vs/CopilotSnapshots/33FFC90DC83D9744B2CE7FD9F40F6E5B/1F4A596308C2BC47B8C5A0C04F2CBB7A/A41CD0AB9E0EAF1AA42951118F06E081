# AuthDemo Solution

## Overview
AuthDemo is a comprehensive .NET 8 solution demonstrating modern authentication and authorization patterns using OpenIddict and ASP.NET Core Identity. The solution includes multiple projects showcasing secure communication between client applications and protected API services.

## Project Structure
The solution consists of the following projects:

---

### AuthDemo.Blazor
**Type:** Blazor Web Application (.NET 8)

**Purpose:**  
Provides a modern, interactive web UI for users to authenticate, view data, and interact with secure APIs.

**Features:**  
- Implements JWT token authentication via OpenIddict.
- Communicates with protected API endpoints.
- Demonstrates role-based UI and access control.

---

### AuthDemo.Razor
**Type:** Razor Web Application (.NET 8)

**Purpose:**  
Alternative web client focused on flight scheduling and demonstrating token-based authentication.

**Features:**  
- Flight schedule interface using shared models.
- Token acquisition and API calls to protected endpoints.
- Error handling and status display.

---

### AuthDemo.Identity
**Type:** ASP.NET Core Web API (.NET 8)

**Purpose:**  
Acts as the authentication and authorization server for the solution.

**Features:**  
- ASP.NET Core Identity for user and role management.
- OpenIddict for OAuth2/OpenID Connect flows.
- Issues JWT tokens with scopes and claims.
- Provides endpoints for token issuance, user registration, and role assignment.

**Setup & Usage:**  
1. Apply database migrations (`dotnet ef database update`).
2. Run the project to start the Identity server.
3. Register users as needed or use the seeded Users for Testing.

---

### AuthDemo.SecureDemoApi
**Type:** ASP.NET Core Web API (.NET 8)

**Purpose:**  
Provides secure API endpoints for authenticated and authorized users.

**Features:**  
- Role-based access control using OpenIddict scopes.
- Example endpoints for testing authentication and authorization.
- Integration with shared models.

---

### AuthDemo.MockApiService
**Type:** ASP.NET Core Web API (.NET 8)

**Purpose:**  
Demonstrates a mock API service with protected endpoints.

**Features:**  
- Weather forecast endpoint secured by OpenIddict.
- Example of scope-based authorization (`AdminScope`).
- Logging and claim inspection for demonstration.

---

### AuthDemo.Shared
**Type:** .NET Class Library

**Purpose:**  
Contains shared models, DTOs, and interfaces used across all projects.

**Features:**  
- Models for flight schedules, weather data, and user information.
- DTOs for API communication.
- Ensures consistency and reduces duplication.

**Usage:**  
- Referenced by all client and API projects.
- Update models here to propagate changes across the solution.

---

## Authentication & Authorization

### Identity Framework
- Built on ASP.NET Core Identity.
- OpenIddict integration for OAuth 2.0 and OpenID Connect.
- JWT token-based authentication.

### Scopes and Audiences

#### Scopes

Scopes define the level of access granted to a user or client application. They are included in JWT tokens and validated by API services.

- **admin.api**
  - **Purpose:** Grants full administrative access.
  - **Associated Roles:** Admin
  - **Access:** Allows access to endpoints requiring administrative privileges (e.g., `/api/weatherforecast`).
- **manager.api**
  - **Purpose:** Grants management-level access.
  - **Associated Roles:** Manager
  - **Access:** Allows access to endpoints requiring manager privileges (e.g., `/api/test`).
- **user.api**
  - **Purpose:** Grants basic user access.
  - **Associated Roles:** User
  - **Access:** Allows access to general user endpoints (e.g., `/api/flight`).

Scopes are assigned during token issuance by the Identity server, based on the user's roles and permissions.

#### Audiences

Audiences (`aud` claim in JWT) specify the intended recipient(s) of the token. Each API service validates the audience to ensure tokens are used only by authorized clients.

- **Identity Server Audience:** Used for authentication and token issuance.
- **SecureDemoApi Audience:** Expected by the AuthDemo.SecureDemoApi project for protected endpoints.
- **MockApiService Audience:** Expected by the AuthDemo.MockApiService project for mock endpoints.

**Configuration Example:**
- When requesting a token, the client specifies the desired audience.
- API services validate the `aud` claim in incoming tokens to ensure they match the expected audience.

**Best Practices:**
- Always configure each API to validate both scopes and audiences.
- Use unique audience values for each API to prevent token misuse.

### Authentication Flow
1. User authenticates via Identity service.
2. JWT token issued with appropriate scopes and audience.
3. Token used for subsequent API calls.
4. API endpoints validate token, scopes, and audience.

---

## Setup Instructions

### Prerequisites
- .NET 8 SDK
- SQL Server (LocalDB or full instance)
- Visual Studio 2022 or VS Code

### Development Setup
1. Clone the repository.
2. Update connection strings in `appsettings.json` for each project.
3. Apply database migrations for Identity (`dotnet ef database update`).
4. Run the Identity server, then start client and API projects as needed.

---

## API Documentation

### Identity Service Endpoints
- `POST /connect/token` - Token generation
- `POST /Account/register` - Register New User

### Secure API Endpoints
- `GET /api/weatherforecast` - Weather data (requires admin scope)
- `GET /api/flight` - Flight schedules (requires user scope)
- `GET /api/flightDetail` - Flight schedules (requires user scope)
- `GET /api/GameSchedules` - Flight schedules (requires user scope)

---


**Note:** This is a demonstration project. Review and enhance security before using in production.